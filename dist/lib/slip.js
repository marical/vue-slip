"use strict";function _possibleConstructorReturn(t,e){if(!t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!e||"object"!=typeof e&&"function"!=typeof e?t:e}function _inherits(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function, not "+typeof e);t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,enumerable:!1,writable:!0,configurable:!0}}),e&&(Object.setPrototypeOf?Object.setPrototypeOf(t,e):t.__proto__=e)}function _toConsumableArray(t){if(Array.isArray(t)){for(var e=0,n=Array(t.length);e<t.length;e++)n[e]=t[e];return n}return Array.from(t)}function _defineProperty(t,e,n){return e in t?Object.defineProperty(t,e,{value:n,enumerable:!0,configurable:!0,writable:!0}):t[e]=n,t}function _classCallCheck(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}var _slicedToArray=function(){function t(t,e){var n=[],o=!0,r=!1,i=void 0;try{for(var s,a=t[Symbol.iterator]();!(o=(s=a.next()).done)&&(n.push(s.value),!e||n.length!==e);o=!0);}catch(t){r=!0,i=t}finally{try{!o&&a.return&&a.return()}finally{if(r)throw i}}return n}return function(e,n){if(Array.isArray(e))return e;if(Symbol.iterator in Object(e))return t(e,n);throw new TypeError("Invalid attempt to destructure non-iterable instance")}}(),_createClass=function(){function t(t,e){for(var n=0;n<e.length;n++){var o=e[n];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(t,o.key,o)}}return function(e,n,o){return n&&t(e.prototype,n),o&&t(e,o),e}}(),_typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t};!function(t,e){"object"===("undefined"==typeof exports?"undefined":_typeof(exports))&&"undefined"!=typeof module?module.exports=e():"function"==typeof define&&define.amd?define(e):e()}(0,function(){function t(t){if(null==t.clientX){var e=t.targetTouches&&t.targetTouches[0]?t.targetTouches:t.changedTouches;if(e&&e[0])return t.clientX=e[0].clientX,t.clientY=e[0].clientY,[e[0].clientX,e[0].clientY]}return[t.clientX,t.clientY]}function e(t,e,n,o){t.addEventListener(p[e],n,!!o)}function n(t,e,n,o){t.removeEventListener(p[e],n,!!o)}function o(t,e){return 0==t?0:t<0?e<t?t:e>0?0:e:e>t?t:e<0?0:e}function r(n){if(!m){m=this,e(h,"move",s,!0),e(h,"up",a,!0);var o=t(n),r=_slicedToArray(o,2),i=r[0],u=r[1];this.bx=this.ax-i,this.by=this.ay-u,this.emit("start",n)}}function i(e){var n=t(e),r=_slicedToArray(n,2),i=r[0],s=r[1];return[o(m.mx,i+m.bx),o(m.my,s+m.by)]}function s(t){if(m){var e;window.getSelection?window.getSelection().removeAllRanges():h.selection.empty(),(e=m).emit.apply(e,["move"].concat(_toConsumableArray(i(t)),[t]))}}function a(t){if(m){n(h,"up",a,!0),n(h,"move",s,!0);var e=i(t),o=_slicedToArray(e,2),r=o[0],u=o[1];this.ax=r,this.ay=u,m.emit("end",r,u,t),m=null}}function u(t,e){var n=e>0?"transform "+e+"ms ease-out":"none";b.forEach(function(e){t.style[e]=n})}function c(t,e,n,o){v.forEach(function(o){t.style[o]="translate3d("+e+"px, "+n+"px, 0)"}),o&&u(t,o)}function f(t){function n(){r&&(r.setTranslate(),r=null)}var o=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"slip",r=void 0;e(h.documentElement,"down",n),t.directive(o,{bind:function(t,e,o){var i=e.value||{},s=i.mx||-60,a=i.my||0,f=!1===i.auto?0:i.auto||100,l=0,h=0;new d(t,s,a).on("start",function(t){f&&u(this.dom,0),l=t.clientY,h=0,r&&r!=this&&n(),t.stopPropagation(),i.start&&i.start(this,i,t)}).on("end",function(t,e,n){if(!(h>0)){if(f){var o=Math.abs(t-this.tx)/Math.abs(s)>.1?s:0;this.tx&&(o=0==o?s:0),this.tx=o;var u=Math.abs(e-this.ty)/Math.abs(a)>.1?a:0;0!=this.ty&&(u=0==u?a:0),this.ty=u,c(this.dom,o,u,f),this.setSkewing(o,u)}r=this,i.end&&i.end(this,i,n)}}).on("move",function(t,e,n){0==h&&(h=Math.abs(n.clientY-l)>5?1:-1),h>0||(n.preventDefault(),c(this.dom,t,e),i.move&&i.move(this,i,n))}).assign({tx:0,ty:0,setTranslate:function(t,e){var n=this.setSkewing(t||0,e||0),o=_slicedToArray(n,2),r=o[0],i=o[1];c(this.dom,r,i,f),this.tx=r,this.ty=i}})}})}var l=(Array.prototype.slice,function(){function t(){_classCallCheck(this,t),this._monitor_=Object.assign({},this._monitor_||{})}return _createClass(t,[{key:"on",value:function(t,e){var n=this._monitor_||(this._monitor_={});return n[t]||(n[t]=[]),n[t].push(e),this}},{key:"hasEvent",value:function(t){return(this._monitor_&&this._monitor_[t]||[]).length>0||!!this["on"+t]}},{key:"onec",value:function(t,e){function n(){e.apply(this,arguments),this.off(t,n)}return this.on(t,n),this}},{key:"off",value:function(t,e){var n=this._monitor_;if(n)if(e){var o=n[t];if(o){var r=o.indexOf(e);r>-1&&o.splice(r,1)}}else t?delete n[t]:delete this._monitor_;return this}},{key:"emit",value:function(t){for(var e=this._monitor_&&this._monitor_[t]||[],n=arguments.length,o=Array(n>1?n-1:0),r=1;r<n;r++)o[r-1]=arguments[r];if(e.length)for(var i=0;i<e.length;i+=1)e[i].apply(this,o);var s=this["on"+t];return s&&s.apply(this,o),this}},{key:"assign",value:function(){for(var t=arguments.length,e=Array(t),n=0;n<t;n++)e[n]=arguments[n];return"string"==typeof e[0]?this.assign(_defineProperty({},e[0],e[1])):(e.unshift(this),Object.assign.apply(Object,e)),this}}]),t}()),h=window.document,y="ontouchstart"in h,m=void 0,p={move:y?"touchmove":"mousemove",down:y?"touchstart":"mousedown",up:y?"touchend":"mouseup"},d=function(t){function n(t,o,i){_classCallCheck(this,n);var s=_possibleConstructorReturn(this,(n.__proto__||Object.getPrototypeOf(n)).call(this));return s.dom="string"==typeof t?h.getElementById(t):t,s.ax=0,s.ay=0,s.mx=o||-60,s.my=i||0,e(s.dom,"down",r.bind(s)),s}return _inherits(n,t),_createClass(n,[{key:"setSkewing",value:function(t,e){return this.ax=o(this.mx,t||0),this.ay=o(this.my,e||0),[this.ax,this.ay]}}]),n}(l),v="WebkitTransform,MozTransform,OTransform,MsTransform,transform".split(","),b="WebkitTransition,MozTransition,OTransition,MsTransform,transition".split(",");return window.Vue&&f(window.Vue),{EventEmitter:l,Slip:d,install:f}});
//# sourceMappingURL=data:application/json;charset=utf8;base64,
